package contacts

import (
    "github.com/adamwoolhether/hypermedia/business/contacts"
    "github.com/adamwoolhether/hypermedia/app/frontend/view/layout"
    "fmt"
	"github.com/adamwoolhether/hypermedia/business/contacts/archiver"
)

templ Index(query string, page int, contacts []contacts.Contact, arch archiver.ArchiveAPI) {
    @layout.Layout() {
    <div class="form-container">
        @Archive(arch)
        <form action="/v1/contacts" method="get" class="tool-bar">
            <label for="search">Search Term</label>
            <input id="search" type="search" name="q" value={ query }
                   hx-get="/v1/contacts"
                   hx-trigger="change, keyup delay:200ms changed"
                   hx-target="tbody"
                   hx-push-url="true"
                   hx-indicator="#spinner"/>
            // htmx-indicator is a CSS class that is automatically injected into the page by htmx.
            <input type="submit" value="Search"/>
            <img id="spinner" style="height: 30px" class="htmx-indicator" src="/static/img/spinning-circles.svg" alt="Loading..."/>
        </form>
        <form>

            @renderContacts(page, contacts)

            <button hx-delete="/v1/contacts"
                    hx-confirm="Are you sure you want to delete these contacts?"
                    hx-target="body">Delete Selected
            </button>
        </form>
        <p>
            <a href="/v1/contacts/new">Add Contact</a>
            // use hx-trigger="load" to load as soon as page laods, even if not in view.
            <span hx-get="/v1/contacts/count" hx-trigger="revealed">
                <img id="spinner" style="height: 30px" class="htmx-indicator" src="/static/img/spinning-circles.svg"/>
            </span>
        </p>
    </div>
    }
}

templ renderContacts(page int, contacts []contacts.Contact) {
    <table>
        <thead>
        <tr>
            <th style="width:6%"></th>
            <th style="width:15%">First</th>
            <th style="width:15%">Last</th>
            <th>Phone</th>
            <th style="width:40%">Email</th>
            <th></th>
        </tr>
        </thead>
        <tbody>
            @Rows(contacts)
            if len(contacts) == 10 {
                <tr>
                    <td colspan="5" style="text-align: center; padding: 10px;">
                        // To auto-scroll instead of loading more on click
                        // change button to space and add a relvealed trigger.
                        //<span   hx-trigger="revealed"
                        <button hx-target="closest tr"
                                hx-swap="outerHTML"
                                hx-select="tbody > tr"
                                hx-get={ fmt.Sprintf("/v1/contacts?page=%d", page + 1) }>
                            Load More
                        </button>
                        <button id="slow-req-btn"
                                hx-target="closest tr"
                                hx-swap="outerHTML"
                                hx-select="tbody > tr"
                                hx-get={ fmt.Sprintf("/v1/contacts/slow?page=%d", page + 1) }>
                            Load More Slowly
                        </button>
                        <button disabled _="on click send htmx:abort to #slow-req-btn
                                            on htmx:beforeRequest from #slow-req-btn remove @disabled from me
                                            on htmx:afterRequest from #slow-req-btn add @disabled to me">
                            Cancel
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    // Example to do simple pagination, but forget the previously loaded page
    //
    //<div>
    //    <span style="float: right">
    //        if page > 1 {
    //            <a href={ templ.URL(fmt.Sprintf("/v1/contacts?page=%d", page - 1)) }>Previous</a>
    //        }
    //        if len(contacts) == 10 {
    //            <a href={ templ.URL(fmt.Sprintf("/v1/contacts?page=%d", page + 1)) }>Next</a>
    //        }
    //    </span>
    //</div>
}

